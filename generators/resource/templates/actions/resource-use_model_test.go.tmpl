package actions

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func (as *ActionSuite) TableChange(table string, count int, fn func()) {
	scount, err := as.DB.Count(table)
	as.NoError(err)

	fn()

	ecount, err := as.DB.Count(table)
	as.NoError(err)
	as.Equal(count, ecount-scount)
}

// Create{{.opts.Model.Model}} creates a default model
func (as *ActionSuite) Create{{.opts.Model.Model}}() *models.{{.opts.Model.Model}}{
	{{.opts.Model.VarCaseSingular}} := &models.{{.opts.Model.Model}}{
		{{ if .opts.Props -}}
			{{ range $p := .opts.Props -}}
				{{ if eq $p.OriginalType "string" "text" -}}
  					{{ $p.Name }}: "some string",
				{{ else if eq $p.OriginalType "int" -}}
					{{ $p.Name }}: 1234567890,
				{{ else if eq $p.OriginalType "nulls.string" "nulls.text" -}}
					{{ $p.Name }}: nulls.NewString("some string"),
				{{ else if eq $p.OriginalType "nulls.int" -}}
					{{ $p.Name }}: nulls.NewInt(1234567890),
				{{ end -}}
			{{ end -}}
		{{ end -}}
	}
	as.NoError(as.DB.Create({{.opts.Model.VarCaseSingular}}))
	return {{.opts.Model.VarCaseSingular}}
}

// Test_{{$.opts.Name.Resource}}Resource_List Default Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_List() {
	{{- if .opts.Props }}
	{{.opts.Model.VarCaseSingular}} := as.Create{{.opts.Model.Model}}()
	{{ end }}

	res := as.HTML("/{{.opts.FilesPath}}").Get()
	as.Equal(200, res.Code)	
	as.Contains(res.Body.String(), {{ if .opts.Props }}{{.opts.Model.VarCaseSingular}}.{{index .opts.Props 0}} {{else}}"{{$.opts.Name.Resource}}"{{ end }})
}

// Test_{{$.opts.Name.Resource}}Resource_Show Default Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_Show() {
	{{.opts.Model.VarCaseSingular}} := as.Create{{.opts.Model.Model}}()

	res := as.HTML("/{{.opts.FilesPath}}/%s", {{.opts.Model.VarCaseSingular}}.ID).Get()
	as.Equal(200, res.Code)
	as.Contains(res.Body.String(), {{ if .opts.Props }}{{.opts.Model.VarCaseSingular}}.{{index .opts.Props 0}} {{else}}"{{$.opts.Name.Resource}}"{{ end }})
}

// Test_{{$.opts.Name.Resource}}Resource_New Default Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_New() {
	res := as.HTML("/{{.opts.FilesPath}}/new").Get()
	as.Equal(200, res.Code)
}

// Test_{{$.opts.Name.Resource}}Resource_Create Default Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_Create() {
	{{.opts.Model.VarCaseSingular}} := &models.{{.opts.Model.Model}}{
		{{ if .opts.Props -}}
			{{ range $p := .opts.Props -}}
				{{ if eq $p.OriginalType "string" "text" -}}
  					{{ $p.Name }}: "some string",
				{{ else if eq $p.OriginalType "int" -}}
					{{ $p.Name }}: 1234567890,
				{{ else if eq $p.OriginalType "nulls.string" "nulls.text" -}}
					{{ $p.Name }}: nulls.NewString("some string"),
				{{ else if eq $p.OriginalType "nulls.int" -}}
					{{ $p.Name }}: nulls.NewInt(1234567890),
				{{ end -}}
			{{ end -}}
		{{ end -}}
	}

	as.TableChange("{{.opts.FilesPath}}", 1, func() {
		res := as.HTML("/{{.opts.FilesPath}}").Post({{.opts.Model.VarCaseSingular}})
		as.Equal(302, res.Code)
	})
}

// Test_{{$.opts.Name.Resource}}Resource_Edit Default Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_Edit() {
	{{.opts.Model.VarCaseSingular}} := as.Create{{.opts.Model.Model}}()
	res := as.HTML("/{{.opts.FilesPath}}/%s/edit", {{.opts.Model.VarCaseSingular}}.ID).Get()
	as.Equal(200, res.Code)
}

// Test_{{$.opts.Name.Resource}}Resource_UpdateDefault Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_Update() {
	{{ if .opts.Props -}}
	{{.opts.Model.VarCaseSingular}} := as.Create{{.opts.Model.Model}}()
	as.TableChange("{{.opts.FilesPath}}", 0, func() {
		updated{{$.opts.Name.Resource}} := {{.opts.Model.VarCaseSingular}}		
		{{- $p := index .opts.Props 0 }}
		{{ if eq $p.OriginalType "string" "text" -}}
		updated{{$.opts.Name.Resource}}.{{$p}} = "New Name"

		res := as.HTML("/{{.opts.FilesPath}}/%s", {{.opts.Model.VarCaseSingular}}.ID).Put(updated{{$.opts.Name.Resource}})
		as.Equal(302, res.Code)

		as.NoError(as.DB.Reload({{.opts.Model.VarCaseSingular}}))
		as.Equal("New Name", {{.opts.Model.VarCaseSingular}}{{ if .opts.Props }}.{{ $p }}{{ end }})

		{{- else if eq $p.OriginalType "int" }}
		updated{{$.opts.Name.Resource}}.{{$p}} = 0987654321
		res := as.HTML("/{{.opts.FilesPath}}/%s", {{.opts.Model.VarCaseSingular}}.ID).Put(updated{{$.opts.Name.Resource}})
		as.Equal(302, res.Code)

		as.NoError(as.DB.Reload({{.opts.Model.VarCaseSingular}}))
		as.Equal(0987654321, {{.opts.Model.VarCaseSingular}}{{ if .opts.Props }}.{{ $p }}{{ end }})

		{{- else if eq $p.OriginalType "bool" }}
		updated{{$.opts.Name.Resource}}.{{$p}} = true,

		res := as.HTML("/{{.opts.FilesPath}}/%s", {{.opts.Model.VarCaseSingular}}.ID).Put(updated{{$.opts.Name.Resource}})
		as.Equal(302, res.Code)

		as.NoError(as.DB.Reload({{.opts.Model.VarCaseSingular}}))
		as.Equal(true, {{.opts.Model.VarCaseSingular}}{{ if .opts.Props }}.{{ $p }}{{ end }})
		{{ end -}}
	})
	{{- else }}
		// Buffalo generated a resource with no properties
		// No need to run this test
	{{- end }}
}

// Test_{{$.opts.Name.Resource}}Resource_Destroy Default Implementation
func (as *ActionSuite) Test_{{$.opts.Name.Resource}}Resource_Destroy() {
	{{.opts.Model.VarCaseSingular}} := as.Create{{.opts.Model.Model}}()
	as.TableChange("{{.opts.FilesPath}}", -1, func() {
		res := as.HTML("/{{.opts.FilesPath}}/%s", {{.opts.Model.VarCaseSingular}}.ID).Delete()
		as.Equal(302, res.Code)
		as.Equal("/{{.opts.FilesPath}}", res.Location())
	})
}